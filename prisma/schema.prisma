datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  role            UserRole
  firstName       String
  lastName        String
  academyId       String?
  academy         Academy?
  subjects        StudentSubject[]
  studentProgress Progress[] @relation("studentProgress")
  teacherProgress Progress[] @relation("teacherProgress")
  teacherRelations UserRelation[] @relation("teacher")
  studentRelations UserRelation[] @relation("student")
  parentRelations  UserRelation[] @relation("parent")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Academy {
  id          String   @id @default(cuid())
  name        String
  logo        String?
  adminId     String   @unique
  admin       User     @relation(fields: [adminId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Subject {
  id          String    @id @default(cuid())
  name        String
  description String?
  students    StudentSubject[]
  progress    Progress[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model StudentSubject {
  id        String   @id @default(cuid())
  studentId String
  subjectId String
  student   User     @relation(fields: [studentId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, subjectId])
}

model Progress {
  id          String   @id @default(cuid())
  studentId   String
  subjectId   String
  teacherId   String
  progressText String?
  progressPercentage Float?
  student     User     @relation("studentProgress", fields: [studentId], references: [id])
  subject     Subject  @relation(fields: [subjectId], references: [id])
  teacher     User     @relation("teacherProgress", fields: [teacherId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserRelation {
  id          String   @id @default(cuid())
  teacherId   String
  studentId   String
  teacher     User     @relation("teacher", fields: [teacherId], references: [id])
  student     User     @relation("student", fields: [studentId], references: [id])
  parentId    String?
  parent      User?    @relation("parent", fields: [parentId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  DEVELOPER
  ADMIN
  TEACHER
  PARENT
  STUDENT
}