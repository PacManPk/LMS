generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  DEVELOPER
  ADMIN
  TEACHER
  PARENT
  STUDENT
}

enum NotificationType {
  PARENT_REMARK
  PROGRESS_UPDATE
  SYSTEM_ALERT
  FEE_DUE
  FEE_PAID
  SALARY_PAID
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum FeeStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum SalaryStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role
  adminId   String?  // All users except DEVELOPER belong to an admin
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  admin              User?              @relation("AdminUsers", fields: [adminId], references: [id])
  managedUsers       User[]             @relation("AdminUsers")
  settings           Settings?
  teacherAssignments TeacherStudent[]   @relation("Teacher")
  studentAssignments TeacherStudent[]   @relation("Student")
  parentChildren     ParentStudent[]    @relation("Parent")
  studentParents     ParentStudent[]    @relation("Student")
  studentCourses     StudentCourse[]
  progressRecords    Progress[]         @relation("StudentProgress")
  progressUpdates    Progress[]         @relation("TeacherProgress")
  createdCourses     Course[]
  parentRemarks      ParentRemark[]     @relation("ParentRemarks")
  sentNotifications  Notification[]     @relation("NotificationSender")
  receivedNotifications Notification[]  @relation("NotificationReceiver")
  userSettings       UserSettings?
  studentFees        Fee[]              @relation("StudentFees")
  feePayments        Fee[]              @relation("FeePayments")
  teacherSalaries    Salary[]           @relation("TeacherSalaries")
  salaryPayments     Salary[]           @relation("SalaryPayments")
}

model Course {
  id          String   @id @default(uuid())
  name        String
  description String?
  adminId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  admin           User            @relation(fields: [adminId], references: [id])
  studentCourses  StudentCourse[]
  progressRecords Progress[]
}

model TeacherStudent {
  id        String @id @default(uuid())
  teacherId String
  studentId String

  // Relations
  teacher User @relation("Teacher", fields: [teacherId], references: [id])
  student User @relation("Student", fields: [studentId], references: [id])

  @@unique([teacherId, studentId])
}

model ParentStudent {
  id        String @id @default(uuid())
  parentId  String
  studentId String

  // Relations
  parent  User @relation("Parent", fields: [parentId], references: [id])
  student User @relation("Student", fields: [studentId], references: [id])

  @@unique([parentId, studentId])
}

model StudentCourse {
  id        String @id @default(uuid())
  studentId String
  courseId  String

  // Relations
  student User   @relation(fields: [studentId], references: [id])
  course  Course @relation(fields: [courseId], references: [id])

  @@unique([studentId, courseId])
}

model Progress {
  id             String           @id @default(uuid())
  studentId      String
  courseId       String
  teacherId      String
  date           DateTime         @default(now())
  lesson         String?          // Manually typed by teacher
  homework       String?          // Homework description
  lessonProgress Float?           // Lesson progress percentage
  score          Float?           // Score/marks assigned by teacher
  remarks        String?          // Teacher remarks
  attendance     AttendanceStatus @default(PRESENT) // Attendance status
  createdAt      DateTime         @default(now())

  // Relations
  student       User           @relation("StudentProgress", fields: [studentId], references: [id])
  course        Course         @relation(fields: [courseId], references: [id])
  teacher       User           @relation("TeacherProgress", fields: [teacherId], references: [id])
  parentRemarks ParentRemark[]
}

model ParentRemark {
  id         String   @id @default(uuid())
  progressId String
  parentId   String
  remark     String
  createdAt  DateTime @default(now())

  // Relations
  progress Progress @relation(fields: [progressId], references: [id])
  parent   User     @relation("ParentRemarks", fields: [parentId], references: [id])
}

model Fee {
  id          String    @id @default(uuid())
  studentId   String
  title       String    // Fee title (e.g., "Tuition Fee", "Library Fee")
  description String?   // Optional description
  amount      Float     // Fee amount
  currency    String    @default("USD") // Currency symbol/code
  dueDate     DateTime  // Due date for payment
  status      FeeStatus @default(PENDING)
  paidDate    DateTime? // Date when fee was paid
  paidById    String?   // Parent who paid the fee
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  student User  @relation("StudentFees", fields: [studentId], references: [id])
  paidBy  User? @relation("FeePayments", fields: [paidById], references: [id])
}

model Salary {
  id          String       @id @default(uuid())
  teacherId   String
  title       String       // Salary title (e.g., "Monthly Salary", "Bonus")
  description String?      // Optional description
  amount      Float        // Salary amount
  currency    String       @default("USD") // Currency symbol/code
  dueDate     DateTime     // Due date for payment
  status      SalaryStatus @default(PENDING)
  paidDate    DateTime?    // Date when salary was paid
  paidById    String?      // Admin who paid the salary
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  teacher User  @relation("TeacherSalaries", fields: [teacherId], references: [id])
  paidBy  User? @relation("SalaryPayments", fields: [paidById], references: [id])
}

model Notification {
  id         String           @id @default(uuid())
  type       NotificationType
  title      String
  message    String
  senderId   String
  receiverId String
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())

  // Relations
  sender   User @relation("NotificationSender", fields: [senderId], references: [id])
  receiver User @relation("NotificationReceiver", fields: [receiverId], references: [id])
}

model Settings {
  id             String  @id @default(uuid())
  adminId        String  @unique
  appTitle       String  @default("AIMS")
  headerImg      String  @default("/assets/default-logo.png")
  enableHomePage Boolean @default(true) // Developer can enable/disable homepage
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  admin User @relation(fields: [adminId], references: [id])
}

model UserSettings {
  id                    String  @id @default(uuid())
  userId                String  @unique
  enableNotifications   Boolean @default(true)
  emailNotifications    Boolean @default(true)
  parentRemarkNotifications Boolean @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
}

model AppSettings {
  id             String  @id @default(uuid())
  appLogo        String  @default("/assets/app-logo.png")
  appName        String  @default("AIMS")
  enableHomePage Boolean @default(true) // Global homepage setting for developers
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}